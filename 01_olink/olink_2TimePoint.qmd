---
title: "Linear Mixed Model for Olink data"
author: "Harvard Chan Bioinformatics Core"
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-tools: true
    code-overflow: wrap
    df-print: paged
    highlight-style: pygments
    number-sections: true
    self-contained: true
    theme: default
    toc: true
    toc-location: right
    toc-expand: false
    lightbox: true
params:
  params_file: 
---

::: {.callout-tip title="Main files shared"}
- `Wasfy_shared.xlsx`: Original multi-tab xlsx file Wasfy shared, contains meta data, olink data etc
- `Wasfy_NPX_P#2.xlsx`: DFCI core shared raw NPX file
- `plate_map.xlsx`: Kevin from Wasfy lab shared plate map
:::


```{r setup,cache = FALSE, message = FALSE, warning=FALSE, echo=FALSE,eval=TRUE}
# setwd("~/hbc/wasfy_olink_human_blood_futbolplayers_hbc05197/")
library(dplyr)
library(DT)
library(OlinkAnalyze)
library(readxl)
library(qs)
library(pheatmap)
library(ggvenn)

import::from(tidyr,gather,spread,separate,unite)
import::from(magrittr,set_rownames,set_colnames,"%<>%")
import::from(tibble,column_to_rownames,rownames_to_column)
import::from(zeallot,"%<-%")
recompute <- T
c(longD,oriD,scaledD,meta) %<-% qread("data/wasfy_data.qs")
```


```{r mapid,eval=F,echo=F}
invisible(imaging <- openxlsx::read.xlsx("data/Wasfy_shared.xlsx",sheet=3))
colnames(imaging) <- gsub(".Percentile","_Percentile",make.unique(colnames(imaging)))
colnames(imaging)[1] <- "studyID"
image_metrics <- imaging %>% 
  gather(metric,value,-studyID) %>% 
  filter(!grepl("avg|average",metric,ignore.case = T)) %>% 
  separate("metric",c("metric","tp"),sep="\\.") %>% 
  mutate(tp=paste0("t",tp)) %>% 
  mutate(value=ifelse(value=="n/a",NA,as.numeric(value)))
```


```{r unique_studyID,eval=F,echo=F}
image_metrics %>% 
  spread(tp,value) %>% 
  mutate(t2_t1 = t2-t1) %>% 
  DT::datatable()
```

```{r warnings,eval=F,echo=F}
image_metrics %>% 
  spread(tp,value) %>% 
  mutate(t2_t1 = t2-t1) %>% 
  filter(is.na(t2_t1)) %>% 
  DT::datatable()
```

## Stats test 

```{r formatD}
library(lme4)
library(lmerTest)
library(purrr)
library(glue)
lmer_summary <- function(modelfitL){
  fixed_summary <- imap(modelfitL,\(x,i)
     coef(summary(x)) %>% 
       as.data.frame() %>% 
       rownames_to_column("variable") %>% 
       select(variable,Estimate,pval="Pr(>|t|)") %>% 
       mutate(assay=i)) %>% 
  bind_rows()
  anova_tab <- imap(modelfitL,\(x,i)
     car::Anova(x) %>% 
       as.data.frame() %>% 
       rownames_to_column("variable") %>% 
       select(variable,Chisq,pval="Pr(>Chisq)") %>% 
       mutate(assay=i)) %>% 
    bind_rows()
  return(list("fixed_summary"=fixed_summary,"anova_tab"=anova_tab))
}
lmer_fit <- function(x,modelD,cov=NULL,interactions=NULL){
  if(!is.null(cov)){
    covstr <- paste0(cov,collapse = "+")
    if(!is.null(interactions)){
      formulaStr <- glue("`{x}`~tp+{covstr}+{interactions}+(1|studyID)")
    }else{
      formulaStr <- glue("`{x}`~tp+{covstr}+(1|studyID)")
    }
  }else{
    formulaStr <- glue("`{x}`~tp+(1|studyID)")
  }
  modelFit <- lmer(as.formula(formulaStr),data = modelD)
  return(modelFit)
}
lmer_fits <- function(assays,...){
  modelSummary <- map(assays,\(x) lmer_fit(x,...)) %>% 
    setNames(assays) %>% 
    lmer_summary()
  return(modelSummary)
}
summary_tidy <- function(summaryOut){
  return(summaryOut$fixed_summary %>% 
    filter(variable=="tpT2") %>% 
    mutate(fdr = p.adjust(pval,"fdr")) %>%  
    select(assay,Estimate,pval,FDR=fdr) %>% 
    arrange(FDR))
}
```

```{r plot_libfxn}
library(ggplot2)
library(ggupset)
library(ggpubr)
library(EnhancedVolcano)
```

```{r label, options}
colnames(meta)[16] <- "t1_t0"
covs <- c("AGE","BMI","Gender","t1_t0")
modelD <- cbind(oriD,meta[rownames(oriD),c("studyID","tp",covs)])
modelD%<>%
  mutate_at(c("AGE","BMI"),as.numeric) %>% 
  mutate_at(c("t1_t0"),as.integer) %>% 
  mutate_at(c("Gender","tp"),as.factor)
assays <- colnames(oriD)
```

### Model data

With previous raw data examination, we found **CT09_T1** has no data returned most likely due to experimental failures (e.g. bubbles in the plate) in processing this sample. 

First, we test only remove this one timepoint (i.e., keeping CT09_T2).This is our **full** model dataset.

Considering the paired data nature of our dataset we also try completely removing this individual (T1 and T2) leaving 10 individuals. We refer to this model as **CT09_rm**.

Finally, we noticed that for sample CT13_T1 (sample collected at time point 1 for participant CT13) all assay values (N=92) returned with warning, meaning most likely the internal spike-ins in this plate well did not work as expected. 

Thus we ran a third model also excluding both time points from participants CT09 and CT13, which we refer as **CT09_AND_13_rm**.

### Univariate analysis: linear mixed model

For each of 92 proteins measured in this Olink assay, we tested the difference of protein level between T1 and T2 across participants using **linear mixed model** (R package `lmer`). To take the paired nature of data into account, participant ID is used as random effect variable.

Given the potential impact of first post-race sample collection (i.e. T1-T0) to the inflammatory protein level, we did the univariate analysis both with or without the inclusion of the covariate T1-T0.


```{r data2model}
data2model <- list("Full" = modelD,
                   "CT09_rm" = modelD[!grepl("^CT09",rownames(modelD)),],
                   "CT09_AND_13_rm" = modelD[!grepl("^CT13|^CT09",rownames(modelD)),])
```

#### Base model: Protein ~ tp + (1|Subject ID)

```{r base_model}
base_modelFits <- map(data2model,\(d) lmer_fits(colnames(oriD),d)) 

base_modelout <- imap(data2model,\(d,i) 
            lmer_fits(colnames(oriD),d) %>% 
              summary_tidy() %>% 
              mutate(data2model=i)) %>% 
  bind_rows()
```

```{r upset_output}
#| fig-cap: "Consistency among significant results with 3 input data"

upsetD <- base_modelout%>% 
  filter(FDR<0.15) %>% 
  group_nest(assay) %>% 
  mutate(data2model = map(data,\(x) x$data2model)) %>% 
  mutate(hitLabel = map_chr(data2model,\(d) paste0(sort(d),collapse = ";"))) 


ggplot(upsetD,aes(x=data2model)) + 
  geom_bar() + 
  theme_pubr() + 
  scale_x_upset()+
  scale_y_continuous(expand = c(0, 0),limits = c(0,8))+
  theme(axis.ticks = element_blank())+
  geom_text(stat='count', aes(label=after_stat(count)), vjust=-1) +
  labs(x="",title="# of Differentially Detected proteins \n with different datasets",y="")
```

```{r consistent_check}
base_modelout%>% 
  filter(FDR<0.15) %>% 
  group_by(assay) %>% 
  summarise(data2modelCol = paste0(sort(data2model),collapse = ";"))%>% 
  arrange(data2modelCol) %>% 
  datatable()

hit_check <- base_modelout%>% 
  filter(FDR<0.15) %>% 
  group_by(assay) %>% 
  summarise(data2modelCol = paste0(sort(data2model),collapse = ";"))
hit_type <- split(hit_check$assay,hit_check$data2modelCol)
```


From above upset plot to visualize the impact of model results with three data inputs, we can see with model dataset **CT09_rm**, the significant hits (N=7, FDR<0.15) encompass candidates from other models. We have:

- `r paste0(hit_type[[1]],collapse=", ")` found by all three models `r names(hit_type)[1]`
- `r paste0(hit_type[[3]],collapse=", ")` found by two models `r names(hit_type)[3]`
- `r paste0(hit_type[[2]],collapse=", ")` found by `r names(hit_type)[2]`


::: {.callout-tip title="BH-FDR vs FWER"}

The Benjamini-Hochberg (BH) procedure[@bh_fdr] controls the false discovery rate (FDR), meaning it limits the expected proportion of false positives among all discoveries, instead of controlling the chance of any false positives like Bonferroni correction. Compared to Bonferroni, BH is less conservative, making it better suited when statistical power is low because it allows more true positives to be detected while still controlling errors.

**Key Difference**:

- Bonferroni controls the family-wise error rate (FWER) — it aims to avoid any false positives but often becomes overly strict.
- BH controls the false discovery rate (FDR) — it tolerates some false positives to boost the chance of finding real signals.

Choosing an FDR of 15% (the FDR<0.15 filtering above) means that (on average) 15% of the seven hits we picked as being significant are actually false positives (roughly 1). If we use Bonferroni test to control for  the
experiment-wide false positive value 0.15, we need to compare p-value for each individual test against the cut-off $0.15/92 \approx 0.0016$. This striengent cut-off controls for not making any type I (false positive) errors in n=92 independent tests.

**Why use BH when power is LOW**:
- In low-power settings (few true positives, noisy data and limited sample size), Bonferroni may miss almost everything (too strict), while BH still identifies meaningful discoveries by balancing risks.
:::

##### Table of (near) significant hits

Therefore, we display the significant model outputs for the base model with **CT09_rm** both in table and paired boxplots.

```{r table_sig}
base_modelout%>% 
  filter(FDR<0.15) %>% 
  filter(data2model=="CT09_rm") %>% 
  select(-data2model) %>% 
  mutate(pval = formatC(pval, format = "e", digits = 2)) %>% 
  datatable()%>%
  formatRound(columns=c('Estimate', 'FDR'), digits=3)
```

##### Paired boxplot for raw data investigation

We displayed the raw data across 10 participants for each of top hit proteins, the linewidth in the boxplot reflects the value T1-T0.

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 4
#| fig-height: 4
baseSig <- base_modelout%>% filter(FDR<0.15) %>% pull(assay) %>% unique()
for(i in baseSig){
  cat('##',i,' \n\n')
  boxD <- data2model$CT09_rm[,c("studyID","tp",i,"t1_t0")]
  colnames(boxD)[3] <- "olink"
  p <- ggplot(boxD, aes(tp,olink,color=tp)) +
          geom_boxplot() +
          geom_point()+
          scale_color_manual(values=c("#0073C2FF","#efc000ff"))+
          geom_line(aes(group = studyID,linewidth = t1_t0),color="gray5") +
          theme_minimal(base_size = 16) +
          scale_linewidth(range = c(0.25, 1.5))+
          theme(legend.position = "none")+
          labs(x="",y="Olink NPX")
  print(p)
  cat(' \n\n')
}
```
:::

**The same plot as above but removing linewidth as we discussed last time.**

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 4
#| fig-height: 4
baseSig <- base_modelout%>% filter(FDR<0.15) %>% pull(assay) %>% unique()
for(i in baseSig){
  cat('##',i,' \n\n')
  boxD <- data2model$CT09_rm[,c("studyID","tp",i,"t1_t0")]
  colnames(boxD)[3] <- "olink"
  p <- ggplot(boxD, aes(tp,olink,color=tp)) +
          geom_boxplot() +
          geom_point()+
          scale_color_manual(values=c("#0073C2FF","#efc000ff"))+
          geom_line(aes(group = studyID),color="gray5") +
          theme_minimal(base_size = 16) +
          theme(legend.position = "none")+
          labs(x="",y="Olink NPX")
  print(p)
  cat(' \n\n')
}
```
:::

##### Volcano plot for full result

We used a volcano plot to show the full results and labeling genes satisfying either of the criteria:

- FDR<0.15
- Regression coefficient >0.5
- Be in top 10 hits in either up-, down-regulation list based on FDR

```{r base_volcano}
#| fig-cap: "Volcano plot show top 10 hits for both directions"
#| fig-width: 6
#| fig-height: 7
topn <- 10
volcanoD <- base_modelout%>% filter(data2model=="CT09_rm") 
hit2show <- volcanoD%>%
  group_nest(sign(Estimate)) %>% 
  mutate(topHits = map(data,\(d) d %>% 
                       slice_min(order_by = FDR,n = topn, with_ties = F) %>% 
                       pull(assay))) %>% 
  pull(topHits) 

hit2show$highlights <-  volcanoD%>%
  filter(FDR<0.15 | abs(Estimate)>0.5) %>% 
  pull(assay)
hit2show <- Reduce("union",hit2show)
yrange <- c(-0.2,max(-log10(volcanoD$FDR))+1.5)
max_effect <- max(1.5,round(max(volcanoD$Estimate)))
min_effect <- min(-1.5,round(min(volcanoD$Estimate)))
xrange <- c(min_effect,max_effect)

EnhancedVolcano(volcanoD,
                      ylim=yrange,
                      xlim= xrange,
                      lab= volcanoD$assay, 
                      selectLab = hit2show,
                      # cut-offs
                      pCutoff = 0.15, 
                      FCcutoff = 0.5,
                      # axis, title
                      x = 'Estimate',
                      y = 'FDR', 
                      title="",
                      subtitle = "", 
                      xlab="Coefficient from Linear Mixed Model",
                      # label 
                      drawConnectors = T, 
                      labSize = rel(3),
                      labCol = 'black',
                      labFace = 'bold',
                      # color
                      colAlpha = 4/5,
                      # legend 
                      legendPosition = 'top',
                      legendLabSize = 13,
                      legendIconSize = 5.0,
                      boxedLabels = TRUE,
                      max.overlaps = Inf,
                      col=c("darkgrey", "lightblue", 
                            "plum1", "purple"),
                legendLabels = c('NS','coefficient','p-value','p-value & coefficient')) 
```

P-values shown above are after multiple test adjustments (FDR).

#####  Interactive volcano plot

An interactive version of the same volcano plot is provided below to hopefully facilitate your own exploration better. When you hover your mouse over the dot, gene name, coefficient estimate and FDR value will show in a box.

```{r}
#| fig-width: 6
#| fig-height: 7
#| echo: false
library(ggiraph)

FDR_cutoff <- 0.15
logFC_cutoff <- 0.5

volcanoD$logFDR <- -log10(volcanoD$FDR)  # You plotted -log10(FDR)
volcanoD$group <- with(volcanoD, ifelse(
  FDR < FDR_cutoff & abs(Estimate) > logFC_cutoff, "p-value and coefficient",
  ifelse(FDR < FDR_cutoff, "p-value",
         ifelse(abs(Estimate) > logFC_cutoff, "coefficient", "NS"))
))

# Define colors to match your uploaded legend
color_map <- c(
  "NS" = "darkgrey",
  "coefficient" = "lightblue",
  "p-value" = "plum1",
  "p-value and coefficient" = "purple"
)

p <- ggplot(
  data = volcanoD,
  mapping = aes(x = Estimate, y = logFDR, color = group)) +
  geom_point_interactive(
    aes(
      tooltip = sprintf("%s\nCoefficient: %.3f\nFDR: %.2g", 
                        assay, Estimate, FDR),
      data_id = assay
    ),
    size = 3,
    alpha = 0.8
  ) +
  geom_text_repel(
    data = subset(volcanoD, assay %in% hit2show),
    aes(label = assay),
    size = 3,
    box.padding = 0.5,
    max.overlaps = Inf
  ) +
  # Add dashed threshold lines
  geom_vline(xintercept = c(-logFC_cutoff, logFC_cutoff), linetype = "dashed", color = "black") +
  geom_hline(yintercept = -log10(FDR_cutoff), linetype = "dashed", color = "black") +
  scale_color_manual(values = color_map) +
  labs(
    x = "Coefficient from Linear Mixed Model",
    y = "-log10(FDR)",
    color = "Significance"
  ) +
  theme_bw() +
  theme(
    legend.position = "top",
    legend.text = element_text(size = 13),
    legend.key.size = unit(0.5, "cm")
  )+
  xlim(xrange)+
  ylim(yrange)


ggiraph::girafe(ggobj = p,
                options = list(
                  opts_tooltip(use_fill = TRUE),
                  opts_zoom(min = 0.5, max = 5),
                  opts_sizing(rescale = FALSE),
                  opts_toolbar(saveaspng = TRUE, delay_mouseout = 2000)
                ))
```

##### Paired boxplot for an expanded gene list

In cases of "weak" hits, to help quickly check the presence of outlier, all proteins shown label in above plot have their raw data plotted in the same style of paired box plot as above.

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 4
#| fig-height: 4

for(i in hit2show){
  cat('##',i,' \n\n')
  boxD <- data2model$CT09_rm[,c("studyID","tp",i,"t1_t0")]
  colnames(boxD)[3] <- "olink"
  p <- ggplot(boxD, aes(tp,olink,color=tp)) +
          geom_boxplot() +
          geom_point()+
          scale_color_manual(values=c("#0073C2FF","#efc000ff"))+
          geom_line(aes(group = studyID),color="gray5") +
          theme_minimal(base_size = 16) +
          theme(legend.position = "none")+
          labs(x="",y="Olink NPX")
  print(p)
  cat(' \n\n')
}
```
:::


#### Model adjusted for T1-T0: Protein ~ tp + t1_t0 + (1|Subject ID)

After adjusting for T1-T0, significant hits shown above remain the same seven proteins shown above. 

For protein **LIF-R**, even itself does not suggest significant changes between T2 and T1 across the cohort. The covariate we adjusted for, t1_t0 (the time difference between T1 and T0) did shows significance after multiple test adjustments.

So we can visualize the association between protein level and T1-T0 in a scatter plot separated by time collection points for **LIF-R**.

```{r adj_model}
adj_modelFits <- map(data2model,\(d) lmer_fits(colnames(oriD),d,c("t1_t0"))) 
 
adj_modelout <- imap(adj_modelFits,\(d,i) d%>% 
                       summary_tidy() %>% 
                       mutate(data2model=i)) %>% 
  bind_rows()
cov_sig <- imap(adj_modelFits,\(d,i) d$fixed_summary%>% 
                  filter(variable=="t1_t0") %>% 
                  mutate(fdr = p.adjust(pval,"fdr")) %>%  
                  filter(fdr < 0.15)%>% 
                  mutate(data2model=i))%>% 
  bind_rows()
adjSig <- adj_modelout%>% filter(FDR<0.15) %>% pull(assay) %>% unique()
if(!all(adjSig==baseSig)){
  message("Covariate adjustment shows different sets of significant hits!")}
```

Show the results (FDR<0.15) from the adjusted model based on  `CT09_rm` cohort, as we can see, it is very similar from above base model.

```{r table_sig_adj}
adj_modelout%>% 
  filter(FDR<0.15) %>% 
  filter(data2model=="CT09_rm") %>% 
  select(-data2model) %>% 
  mutate(pval = formatC(pval, format = "e", digits = 2)) %>% 
  datatable()%>%
  formatRound(columns=c('Estimate', 'FDR'), digits=3)
```

Lastly, based on our last time's discussion about potential gender bias driving the association of protein level of **LIF-R**. and time difference between T1 and T0, we colored the scatterplot based on gender.

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 7
#| fig-height: 4
for(i in unique(cov_sig$assay)){
  cat('##',i,' \n\n')
  scatterD <- data2model$CT09_rm[,c("tp",i,"t1_t0")]
  colnames(scatterD)[2] <- "olink"
  scatterD$gender <- as.factor(meta[rownames(scatterD),"Gender"])
  scatterD$studyID <- meta[rownames(scatterD),"studyID"]
  p <- ggscatter(scatterD,x="t1_t0",y="olink",facet.by = "tp",
                  color = "gender",
                 label = "studyID", repel = TRUE,
              palette = c("#00AFBB", "#E7B800"))+
          labs(x="Days between T1 and T0",y="Olink NPX")+
          theme(strip.background = element_blank())+
          scale_x_continuous(breaks = 1:7)+theme_pubr()
  print(p)
  cat(' \n\n')
}
```
:::

## Relationship between imaging metrics and protein level

We considered three metrics to quantify the average change of FAI-SCORE derived from CCTAs for LAD, LCX and RCA between time point 2 ($T_2$) and time point 1 ($T_1$).

>Change in arithmetic mean of FAI-score for LAD, LCX and RCA between T2 and T1

$\Delta({\text{Arithmetic Mean}}) = \frac{\text{LAD}_{T_2} + \text{LCX}_{T_2}+ \text{RCA}_{T_2}}{3}- \frac{\text{LAD}_{T_1} + \text{LCX}_{T_1} + \text{RCA}_{T_1}}{3}$

It is referred below as **Change_of_Arithmetic**.

>Change in geometric mean of FAI-score for LAD, LCX and RCA between T2 and T1

$\Delta(\textrm{Geometric Mean}) = \sqrt[3]{\text{LAD}_{T_2} \cdot \text{LCX}_{T_2} \cdot \text{RCA}_{T_2}} - \sqrt[3]{\text{LAD}_{T_1} \cdot \text{LCX}_{T_1} \cdot \text{RCA}_{T_1}})$

It is referred below as **Change_of_Geometric**.

>Arithmetic mean of changes of FAI-score for LAD, LCX and RCA between T2 and T1 scaled by the average of two time points 

$\text{Mean}(\Delta_{\text{scaled}}) = \frac{1}{3} \left[\frac{\text{LAD}_{T_2} - \text{LAD}_{T_1}}{(\text{LAD}_{T_2} + \text{LAD}_{T_1})/2} +\frac{\text{LCX}_{T_2} - \text{LCX}_{T_1}}{(\text{LCX}_{T_2} + \text{LCX}_{T_1})/2} +\frac{\text{RCA}_{T_2} - \text{RCA}_{T_1}}{(\text{RCA}_{T_2} + \text{RCA}_{T_1})/2} \right]$

It is referred below as **Mean_of_Change**.


```{r load_in_imagingD}
invisible(imaging <- openxlsx::read.xlsx("data/CTFAI OLINK Catalyst Compiled.xlsx",sheet=3))
colnames(imaging) <- gsub(".Percentile","_Percentile",make.unique(colnames(imaging)))
colnames(imaging)[1] <- "studyID"
image_metrics <- imaging %>% 
  gather(metric,value,-studyID) %>% 
  filter(!grepl("avg|average",metric,ignore.case = T)) %>% 
  separate("metric",c("metric","tp"),sep="\\.") %>% 
  mutate(tp=paste0("t",tp)) %>%
  mutate(value=ifelse(value=="n/a",NA,as.numeric(value))) %>% 
  filter(grepl("FAISCORE",metric))
```

```{r compute_avg}
geometric_mean <- function(x){exp(mean(log(x[!is.na(x)])))}
change_avg <- image_metrics%>%
  group_by(studyID,tp) %>% 
  summarise(FAISCORE_avg=mean(value,na.rm=T),
            FAISCORE_avg2=geometric_mean(value)) %>% 
  gather(metric,value,-tp,-studyID) %>% 
  spread(tp,value) %>% 
  group_by(studyID) %>% 
  mutate(value = t2-t1) %>% 
  select(studyID,metric,value)
avg_change <- image_metrics%>%
  spread(tp,value) %>% 
  mutate(deltap =(t2-t1)*2/(t1+t2)) %>% 
  group_by(studyID) %>% 
  summarise(value=mean(deltap,na.rm=T)) %>% 
  mutate(metric="FAISCORE_avg3",.before="value")
imagingD <- rbind(change_avg,avg_change)
imaging_metric <- imagingD %>% spread(metric,value) %>% column_to_rownames("studyID")
```


```{r diff_olink}
olinkD <- oriD %>% 
  rownames_to_column("studyID") %>% 
  gather(assay,value,-studyID) %>% 
  separate("studyID",c("studyID","tp")) %>% 
  spread(tp,value) %>% 
  mutate(dassay = T2-T1) %>% 
  select(studyID,assay,dassay) %>% 
  spread(assay,dassay) %>% 
  column_to_rownames("studyID")
sharedID <- setdiff(intersect(rownames(imaging_metric),rownames(olinkD)),"CT09")
olinkD <-olinkD[sharedID,] 
imaging_metric <- imaging_metric[sharedID,]
colnames(imaging_metric) <- c("Change_of_Arithmetic","Change_of_Geometric","Mean_of_Change")
```

### Analysis across 9 participants, CT05 included

####  Pearson correlation

```{r cuz_fxn}
matCor <- function(mat1_df,mat2_df,cor_method="pearson"){
  # Preallocate result containers
  n1 <- ncol(mat1_df)
  n2 <- ncol(mat2_df)
  cor_matrix <- matrix(NA, nrow = n1, ncol = n2)
  p_matrix <- matrix(NA, nrow = n1, ncol = n2)
  
  # Compute correlations
  for (i in seq_len(n1)) {
    for (j in seq_len(n2)) {
      res <- cor.test(mat1_df[[i]], mat2_df[[j]], method = cor_method)
      cor_matrix[i, j] <- res$estimate
      p_matrix[i, j] <- res$p.value
    }
  }
  
  # Add row/column names
  rownames(cor_matrix) <- colnames(mat1_df)
  colnames(cor_matrix) <- colnames(mat2_df)
  rownames(p_matrix) <- colnames(mat1_df)
  colnames(p_matrix) <- colnames(mat2_df)
  
  # Create long-form result table
  result_table <- data.frame(
    mat1_col = rep(rownames(cor_matrix), times = n2),
    mat2_col = rep(colnames(cor_matrix), each = n1),
    correlation_estimate = as.vector(cor_matrix),
    correlation_significance = as.vector(p_matrix)
  )
  return(list("cor_matrix"=cor_matrix,
              "p_matrix"=p_matrix,
              "long_output"=result_table,
              "corm" = cor_method))
}
make_bold_names <- function(mat, rc_fun, rc_names) {
  bold_names <- rc_fun(mat)
  ids <- rc_names %>% match(rc_fun(mat))
  ids %>%
    walk(
      function(i)
        bold_names[i] <<-
        bquote(bold(.(rc_fun(mat)[i]))) %>%
        as.expression()
    )
  bold_names
}

matCor_tidy <- function(...){
  c(cor_matrix,p_matrix,long_output,corM)%<-% matCor(...)
  cor_top <- long_output %>% 
    set_colnames(c("var1","var2","cor","cor_pval")) %>% 
    filter(cor_pval<0.05) %>% 
    arrange(cor_pval)%>% 
    group_by(var2) %>% 
    mutate(FDR = p.adjust(cor_pval,method="BH"))
  top_dt <- cor_top%>% 
    mutate(cor_pval = formatC(cor_pval, format = "e", digits = 2)) %>% 
    arrange(var1) %>% 
    datatable()%>%
    formatRound(columns=c('cor', 'cor_pval',"FDR"), digits=3)
  colnames(cor_top) <- gsub("cor",corM,colnames(cor_top))
  metric_split <- split(cor_top,cor_top$var2)
  return(list("corMat"=cor_matrix,"top"=cor_top,"dt"=top_dt,"split"=metric_split))
  
}
```

```{r pearson}
c(cor_matrix,pearson_top,pearson_dt,split_dt)%<-% matCor_tidy(olinkD,imaging_metric)
```

Showing pearson correlation coefficients between imaging metrics and olink measurements, proteins found significantly altered from two time points are highlighted in **bold**.

```{r heatmap_pearson}
#| results: asis
#| fig-width: 6
#| fig-height: 10
pheatmap(cor_matrix,
         color = colorRampPalette(c("#115f9a", "white","#991f17" ))(20),
         main = "Pearson Correlation (Imaging vs Olink)",
         cluster_rows = TRUE,
         cluster_cols = TRUE,
         fontsize_row = rel(6),
         fontsize_col = rel(9),
         labels_row = make_bold_names(cor_matrix, rownames, baseSig),
         angle_col = 0)
```

Using significance level at 5% (p-value<0.05), we have the significant correlation shown in below table:

```{r top_pearson}
pearson_dt
```

Below, we also provided a result table split by three metrics we use.

::: {.panel-tabset}
```{r}
#| results: asis
for(i in names(split_dt)){
  cat('##',i,' \n\n')
  t <- split_dt[[i]]%>% 
    mutate(pearson_pval = formatC(pearson_pval, format = "e", digits = 2)) %>% 
    datatable()%>%
    formatRound(columns=c('pearson', 'pearson_pval',"FDR"), digits=3)
  print(htmltools::tagList(t))
  cat(' \n\n')
}
```
:::


We showed the paired boxplot for olink data below to serve as reference for the identified protein associated with FAI-score.

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 4
#| fig-height: 4
for(i in unique(pearson_top$var1)){
  cat('##',i,' \n\n')
  boxD <- data2model$CT09_rm[,c("studyID","tp",i,"t1_t0")]
  colnames(boxD)[3] <- "olink"
  p <- ggplot(boxD, aes(tp,olink,color=tp)) +
          geom_boxplot() +
          geom_point()+
          scale_color_manual(values=c("#0073C2FF","#efc000ff"))+
          geom_line(aes(group = studyID),color="gray5") +
          theme_minimal(base_size = 16) +
          theme(legend.position = "none")+
          labs(x="",y="Olink NPX")
  print(p)
  cat(' \n\n')
}
```
:::

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 9
#| fig-height: 3.5
for(i in unique(pearson_top$var1)){
  cat('##',i,' \n\n')
  y = olinkD[,i]
  par(mfrow = c(1, 3))
  for (m in colnames(imaging_metric)) {
    x = imaging_metric[,m]
    plot(x,y,main = i,
       xlab = m, 
       ylab = "Change of Olink Measurement",
       col=ifelse(rownames(imaging_metric)=="CT05","darkred","black"),
       pch = 19, frame = FALSE)
    lines(lowess(x, y), col = "royalblue")
  }
  cat(' \n\n')
}
```
:::

CT05 was colored red in above scatter plots, which did appear as an outlier driving some suspicious correlations.

####  Spearman correlation

```{r compute_spearman}
c(cor_matrix,spearman_top,spearman_dt,split_dt)%<-% matCor_tidy(olinkD,imaging_metric,"spearman")
```

Showing spearman correlation coefficients between imaging metrics and olink measurements, proteins found significantly altered from two time points are highlighted in **bold**.

```{r heatmap_spearman}
#| results: asis
#| fig-width: 6
#| fig-height: 10
pheatmap(cor_matrix,
         color = colorRampPalette(c("#115f9a", "white","#991f17" ))(20),
         main = "Spearman Correlation (Imaging vs Olink)",
         cluster_rows = TRUE,
         cluster_cols = TRUE,
         fontsize_row = rel(6),
         fontsize_col = rel(9),
         labels_row = make_bold_names(cor_matrix, rownames, baseSig),
         angle_col = 0)
```

Using significance level at 5% (p-value<0.05), we have the significant correlation shown in below table:

```{r top_spearman}
spearman_dt
```

Below, we also provided a result table split by three metrics we use.

::: {.panel-tabset}
```{r}
#| results: asis
for(i in names(split_dt)){
  cat('##',i,' \n\n')
  t <- split_dt[[i]]%>% 
    mutate(spearman_pval = formatC(spearman_pval, format = "e", digits = 2)) %>% 
    datatable()%>%
    formatRound(columns=c('spearman', 'spearman_pval',"FDR"), digits=3)
 print(htmltools::tagList(t))
  cat(' \n\n')
}
```
:::


We showed the paired boxplot for olink data below to serve as reference for the identified protein associated with FAI-score.

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 4
#| fig-height: 4
for(i in unique(spearman_top$var1)){
  cat('##',i,' \n\n')
  boxD <- data2model$CT09_rm[,c("studyID","tp",i,"t1_t0")]
  colnames(boxD)[3] <- "olink"
  p <- ggplot(boxD, aes(tp,olink,color=tp)) +
          geom_boxplot() +
          geom_point()+
          scale_color_manual(values=c("#0073C2FF","#efc000ff"))+
          geom_line(aes(group = studyID),color="gray5") +
          theme_minimal(base_size = 16) +
          theme(legend.position = "none")+
          labs(x="",y="Olink NPX")
  print(p)
  cat(' \n\n')
}
```
:::

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 9
#| fig-height: 3.5
for(i in unique(spearman_top$var1)){
  cat('##',i,' \n\n')
  y = olinkD[,i]
  par(mfrow = c(1, 3))
  for (m in colnames(imaging_metric)) {
    x = imaging_metric[,m]
    plot(x,y,main = i,
       xlab = m, 
       ylab = "Change of Olink Measurement",
       col=ifelse(rownames(imaging_metric)=="CT05","darkred","black"),
       pch = 19, frame = FALSE)
    lines(lowess(x, y), col = "royalblue")
  }
  cat(' \n\n')
}
```
:::


####  Consistency between two types of correlations

```{r}
#| fig-width: 8
#| fig-height: 4

sets <- list(
  `Pearson` = paste0("\n",unique(pearson_top$var1)),
  `Spearman` = paste0("\n",unique(spearman_top$var1))
)

ggvenn(
  data = sets,
  fill_color = c("#66C2A5", "#FC8D62"),
  stroke_size= 0.5,
  set_name_size = 6,
  text_size     = 4,
  show_elements = TRUE 
)
```


From above analysis, especially speculations of the raw data with scatterplots, CT05 did appear as an outlier in this small sample size analysis, therefore we repeat above correlation analysis with CT05 removed (N=8 now).

### Analysis across 8 participants, CT05 excluded

```{r pearson2}
olinkD <- olinkD[rownames(olinkD)!="CT05",]
imaging_metric <- imaging_metric[rownames(imaging_metric)!="CT05",]
c(cor_matrix,pearson2_top,pearson2_dt,split_dt)%<-% matCor_tidy(olinkD,imaging_metric)
```


```{r spearman2}
c(cor_matrix,spearman2_top,spearman2_dt,split_dt)%<-% matCor_tidy(olinkD,imaging_metric,"spearman")
```


```{r }
#| fig-width: 8
#| fig-height: 4
sets <- list(
  `Pearson` = paste0("\n",unique(pearson2_top$var1)),
  `Spearman` = paste0("\n",unique(spearman2_top$var1))
)

ggvenn(
  data       = sets,
  fill_color = c("#66C2A5", "#FC8D62"),
  stroke_size= 0.5,
  set_name_size = 6,
  text_size     = 4,
  show_elements = TRUE 
)
```


::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 9
#| fig-height: 3.5
for(i in union(pearson2_top$var1,spearman2_top$var1)){
  cat('##',i,' \n\n')
  y = olinkD[,i]
  par(mfrow = c(1, 3))
  for (m in colnames(imaging_metric)) {
    x = imaging_metric[,m]
    plot(x,y,main = i,
       xlab = m, 
       ylab = "Change of Olink Measurement",
       col=ifelse(rownames(imaging_metric)=="CT05","darkred","black"),
       pch = 19, frame = FALSE)
    lines(lowess(x, y), col = "royalblue")
  }
  cat(' \n\n')
}
```
:::

```{r summary}
ct5out <- union(pearson2_top$var1,spearman2_top$var1)
ct5in <- union(pearson_top$var1,spearman_top$var1)
newhits <- setdiff(ct5out,ct5in)
```


From this analysis excluding CT05, we did observe changes in the top hits. Particularly, we found two new hits `r paste0(newhits, collapse=",")` that were not found when CT05 was inlcuded.

We showed the paired boxplot for olink data below for them to serve as reference for the identified protein associated with FAI-score.

::: {.panel-tabset}
```{r}
#| results: asis
#| fig-width: 4
#| fig-height: 4
for(i in newhits){
  cat('##',i,' \n\n')
  boxD <- data2model$CT09_rm[,c("studyID","tp",i,"t1_t0")]
  colnames(boxD)[3] <- "olink"
  p <- ggplot(boxD, aes(tp,olink,color=tp)) +
          geom_boxplot() +
          geom_point()+
          scale_color_manual(values=c("#0073C2FF","#efc000ff"))+
          geom_line(aes(group = studyID),color="gray5") +
          theme_minimal(base_size = 16) +
          theme(legend.position = "none")+
          labs(x="",y="Olink NPX")
  print(p)
  cat(' \n\n')
}
```
:::

## Summary

- We found **`r paste0(baseSig, collapse=", ")`** proteins whose Olink measurements significantly decrease (linear mixed model with matched individual) from T1 to T2 using 10 indivisuals whose Olink measurements are available for both time points; adjusting for time between T1 and T0 does not impact the results;
- Those `r length(baseSig)` significantly altered proteins **did not necessarily** correlate with the change of FAI-score average across three sites (LAD, LCX and RCA). `r intersect(ct5in,baseSig)` is the only protein both altered across two time points and whose change possibly correlates with the change of average FAI score;
- Instead, we found **`r paste0(ct5in, collapse=", ")`** whose changes correlate with the change of average FAI-score when CT05, a individual with missing LCX measurements, was included in the analysis;
- When removing  CT05 from the analysis (recommended due to the observation it may drive suspicious correlations as an outlier of average FAI score), **`r paste0(newhits, collapse=", ")`** shows significantly correlations with FAI-score change which were not detected in CT05-included analysis. **`r paste0(setdiff(ct5in,ct5out), collapse=", ")`** does not suggest significant association anymore when CT05 was removed from the analysis cohort. **`r paste0(intersect(ct5out,ct5in), collapse=", ")`** were found significant no matter CT05 was excluded/included.